// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String
  image         String?
  role          Role      @default(USER)
  walletAddress String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Ticket[]  @relation("CreatedTickets")
  assigned      Ticket[]  @relation("AssignedTickets")
  comments      Comment[]
}

model Ticket {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status    @default(OPEN)
  priority    Priority  @default(MEDIUM)
  category    Category  @default(GENERAL)
  lastTxHash  String?   // Add this field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("CreatedTickets", fields: [userId], references: [id])
  userId      String    @db.ObjectId
  assignedTo  User?     @relation("AssignedTickets", fields: [assignedId], references: [id])
  assignedId  String?   @db.ObjectId
  comments    Comment[]
  txHash      String?   // For blockchain transaction reference

  @@index([userId])
  @@index([assignedId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String   @db.ObjectId
}

enum Role {
  ADMIN
  SUPPORT
  USER
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Category {
  GENERAL
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG
}
